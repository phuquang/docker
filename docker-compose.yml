version: '3.9'
services:

  # Web server
  proxy:
    restart: unless-stopped # always
    build:
      context: ./library
      dockerfile: proxy.dockerfile
      args:
        buildno: 1
      labels:
        net.mimup.phuquang.description: "Proxy Web Service"
        net.mimup.phuquang.department: "Develop"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 20s
    hostname: ${APP_CONTAINER_NAME}_proxy
    image: ${APP_CONTAINER_NAME}_proxy:proxy
    container_name: ${APP_CONTAINER_NAME}_proxy
    working_dir: /projects
    volumes:
      - ${APP_WORK_DATA}:/projects:delegated
      - ${APP_DATA}:/docker:delegated
      - ${APP_VOLUME_NGINX}:/etc/nginx/conf.d
      - ./library/ssl:/etc/nginx/ssl
      - ./logs/proxy:/var/log/nginx
    networks:
      - ${APP_NETWORK}
    ports:
      - 80:80
      - 443:443

  # Web server
  apache:
    restart: unless-stopped # always
    environment:
      APACHE_RUN_USER: '#1001'
      APACHE_RUN_GROUP: '#1001'
    build:
      args:
        USER: ${DOCKER_USER}
        USERID: ${DOCKER_UID}
        GROUPID: ${DOCKER_GID}
      context: ./library
      dockerfile: apache.dockerfile
    hostname: ${APP_CONTAINER_NAME}_apache
    image: ${APP_CONTAINER_NAME}_apache:apache
    container_name: ${APP_CONTAINER_NAME}_apache
    working_dir: /projects
    volumes:
      - ${APP_WORK_DATA}:/projects:delegated
      - ${APP_DATA}:/docker:delegated
      - ${APP_VOLUME_APACHE}:/etc/apache2/sites-enabled/
      - ./logs/apache:/var/log/apache2
      - ./library/ssl:/etc/ssl/local
    networks:
      - ${APP_NETWORK}
    # ports:
    #   - 80:80
    #   - 443:443

  # PHP
  php8:
    restart: unless-stopped # always
    build:
      args:
        USER: ${DOCKER_USER}
        USERID: ${DOCKER_UID}
        GROUPID: ${DOCKER_GID}
      context: ./library
      dockerfile: php8.dockerfile
    hostname: ${APP_CONTAINER_NAME}_php8
    image: ${APP_CONTAINER_NAME}_php8:php8
    container_name: ${APP_CONTAINER_NAME}_php8
    volumes:
      - ${APP_WORK_DATA}:/projects:delegated
      - ${APP_DATA}:/docker:delegated
      - ./conf_supervisor:/etc/supervisor/conf.d
      - ./logs/supervisor:/var/log/supervisor
    working_dir: /projects
    networks:
      - ${APP_NETWORK}

  # Tool access database
  adminer:
    restart: unless-stopped # always
    image: adminer
    container_name: ${APP_CONTAINER_NAME}_adminer
    networks:
        - ${APP_NETWORK}
    ports:
        - 9011:8080
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql # pgsql for PostgreSQL
      ADMINER_DEFAULT_SERVER: mysql
      # ADMINER_DESIGN: galkaev
      PHP_CLI_MEMORY_LIMIT: 512M
      PHP_MAX_EXECUTION_TIME: 0
      PHP_POST_MAX_SIZE: 2000M
      PHP_UPLOAD_MAX_FILESIZE: 2000M

  # Tool access database
  phpmyadmin:
    restart: unless-stopped # always
    depends_on:
      - mysql
    image: phpmyadmin/phpmyadmin
    container_name: ${APP_CONTAINER_NAME}_phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_PASS}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
      MYSQL_PASSWORD: ${MYSQL_PASS}
      MYSQL_USER: root
      UPLOAD_LIMIT: 10000M
    volumes:
      - ./library/phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
    networks:
      - ${APP_NETWORK}
    ports:
      - 9010:80

  # Database
  mysql:
    restart: unless-stopped # always
    # platform: linux/x86_64 # running MySQL on ARM
    hostname: ${APP_CONTAINER_NAME}_mysql
    image: mysql:8
    container_name: ${APP_CONTAINER_NAME}_mysql
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASS}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
    volumes:
      - ${APP_WORK_DATA}:/projects:delegated
      - ./library/mysql/bashrc:/home/mysql/.bashrc
      - ./library/bashrc/bash_aliases.sh:/root/.bash_aliases
      - ./library/script:/data
      - ./backups:/backups
      - ./library/mysql/credentials.cnf:/home/mysql/credentials.cnf
      - data-mysql:/var/lib/mysql
    user: mysql
    networks:
      - ${APP_NETWORK}
    ports:
      - 3306:3306
    healthcheck:
      test: out=$$(mysqladmin ping -h localhost -P 3306 -u root --password=${MYSQL_ROOT_PASS} 2>&1); echo $$out | grep 'mysqld is alive' || { echo $$out; exit 1; }

  # Tool for GIT
  ungit:
    restart: unless-stopped # always
    build:
      args:
        USER: ${DOCKER_USER}
        USERID: ${DOCKER_UID}
        GROUPID: ${DOCKER_GID}
      context: ./library
      dockerfile: ungit.dockerfile
    hostname: ${APP_CONTAINER_NAME}_ungit
    image: ${APP_CONTAINER_NAME}_ungit:ungit
    container_name: ${APP_CONTAINER_NAME}_ungit
    working_dir: /projects
    volumes:
      - ${APP_WORK_DATA}:/projects:delegated
      - ${APP_DATA}:/docker:delegated
    networks:
      - ${APP_NETWORK}

  # Mail
  mailhog:
    restart: unless-stopped # always
    image: mailhog/mailhog:latest
    container_name: ${APP_CONTAINER_NAME}_mailhog
    networks:
      - ${APP_NETWORK}
    ports:
      - 1025:1025
      - 8025:8025
    command: ["-storage=maildir", "-maildir-path=/maildir"]
    volumes:
      - data-mailhog:/maildir:delegated
    healthcheck:
      test: ["CMD", "echo | telnet 127.0.0.1 8025"]
      interval: 1m30s
      timeout: 5s
      retries: 3

  rabbitmq:
    restart: unless-stopped # always
    image: "rabbitmq:3-management"
    container_name: ${APP_CONTAINER_NAME}_rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "unique-erlang-cookie"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - 15671:15671
      - 15672:15672
      - 5671:5671
      - 5672:5672
    networks:
      - ${APP_NETWORK}
networks:
  workspace:
    name: ${APP_NETWORK}

volumes:
  data-mysql:
  data-mailhog:
